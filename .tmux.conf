# Last Change: 2020-Dec-08.
#
#
set -g prefix C-t # prefix keyの変更

# リロード
bind r source-file ${HOME}/.tmux.conf \; display-message "Reload Config!!"

# tmux上でvimにラグが発生する件を修正
set -sg escape-time 0
# 履歴保持数
set-option -g history-limit 10000
# キーコードが変わる
setw -g xterm-keys on

#-------------------------------------------
# Copy mode
#-------------------------------------------
# enter copy-mode
bind m copy-mode

# macのクリップボードへコピー
# http://qiita.com/masa2sei/items/71361e347e430f9bb14e
# Use vim keybindings in copy mode
setw -g mode-keys vi
# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send-keys -X begin-selection

# tmuxのvimでクリップボード共有
# http://qiita.com/upinetree/items/cd80bc7865c52091be10
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy" # for mac
# bind-key -t vi-copy y copy-pipe "xclip -sel clip -i"  # for linux
# OSで切り替え
if-shell "uname | grep -q Darwin" "bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'" "bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -sel clip -i'"

# Esc キーでコピーの反転を解除（コピーモードは抜けない）
bind-key -T copy-mode-vi Escape send-key -X clear-selection
# Ctrl-c キーでコピーの反転を解除し, コピーモードから抜ける
bind-key -T copy-mode-vi C-c send-key -X cancel
# コピーモードでC-vで矩形選択開始
bind-key -T copy-mode-vi C-v send-key -X rectangle-toggle
# 1行選択
bind-key -T copy-mode-vi V send-key -X select-line
# Vi モード中に Ctrl-a で行頭に（Emacs ライク）
bind-key -T copy-mode-vi C-a send-key -X start-of-line
# Vi モード中に Ctrl-e で行末に（Emacs ライク）
bind-key -T copy-mode-vi C-e send-key -X end-of-line

# ページスクロール
bind-key -T copy-mode-vi C-n send-key -X page-up
bind-key -T copy-mode-vi C-f send-key -X page-down
# ページ送り
bind-key -T copy-mode-vi C-u send-key -X scroll-up
bind-key -T copy-mode-vi C-d send-key -X scroll-down

#-------------------------------------------
# mouse
#-------------------------------------------
set -g mouse on
# tmux2.1でスクロール有効化
# https://github.com/tmux/tmux/issues/145
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

#-------------------------------------------
# color general
#-------------------------------------------
# 256色端末を使用する
# set -g default-terminal "screen-256color"  # keycode is not same as xterm
# set-option -g default-terminal "xterm"
set -g default-terminal "xterm-256color"  # use same as $TERM in host shell


#-------------------------------------------
# status bar
#-------------------------------------------
# 上部に表示する
set -g status-position top
# 中央揃え
set-option -g status-justify "centre"
# color
set -g status-fg colour191
set -g status-bg colour60


#-------------------------------------------
# Window
#-------------------------------------------
set-option -g base-index 1 # index start from 1
# inactive/active styles
set -g window-style default  # default will be transparent
# set -g window-active-style bg=colour236
set -g window-active-style default


#-------------------------------------------
# Pane
#-------------------------------------------
# inactive border
# set -g pane-border-style fg=colour235,bg=colour239
# active border
# set -g pane-active-border-fg black
# set -g pane-active-border-bg colour60
# for tmux21 patched
# https://github.com/hage/homebrew-formula/blob/master/tmux21.rb
# set -g pane-border-ascii on


#-------------------------------------------
# Control
#-------------------------------------------
bind t display-panes
set -g display-panes-time 10000 # pane-indexの表示時間
setw -g pane-base-index 1 # index start from 1
set-option -g renumber-windows on # window削除時インデックスを振りなおし
# swap by Shift-{p, n}
bind S-p swap-window -t -1
bind S-n swap-window -t +1
# vimとtmuxで移動
# http://takegue.hatenablog.com/entry/2015/01/26/031231
# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
# bind -n S-Left  if-shell "$is_vim" "send-keys S-Left"  "select-pane -L"
# bind -n S-Down  if-shell "$is_vim" "send-keys S-Down"  "select-pane -D"
# bind -n S-Up    if-shell "$is_vim" "send-keys S-Up"    "select-pane -U"
# bind -n S-Right if-shell "$is_vim" "send-keys S-Right" "select-pane -R"
#
# alt + hjkl to change pane for tmux or vim
bind -n M-h if-shell "$is_vim" "send-keys M-h"  "select-pane -L"
bind -n M-j if-shell "$is_vim" "send-keys M-j"  "select-pane -D"
bind -n M-k if-shell "$is_vim" "send-keys M-k"  "select-pane -U"
bind -n M-l if-shell "$is_vim" "send-keys M-l"  "select-pane -R"

# prefix v, hでペイン分割
bind-key v split-window -v -c "#{pane_current_path}"
bind-key h split-window -h -c "#{pane_current_path}"

#-------------------------------------------
# TPM, tmux plugin manager
#-------------------------------------------
# List of plugins
# Supports `github_username/repo` or full git repo URLs
set -g @tpm_plugins '              \
  tmux-plugins/tpm                 \
  tmux-plugins/tmux-sensible       \
  tmux-plugins/tmux-resurrect      \
'

# tmux-resurrect setting
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'

# Other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell '~/.tmux/plugins/tpm/tpm'

